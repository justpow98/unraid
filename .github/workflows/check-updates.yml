name: Weekly Container Update Check

on:
  schedule:
    - cron: '0 9 * * SUN'  # Every Sunday at 9 AM UTC
  workflow_dispatch:  # Manual trigger
    inputs:
      force_check:
        description: 'Force check all services even if recently checked'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run - check for updates but do not create PR'
        required: false
        default: false
        type: boolean

jobs:
  check-updates:
    runs-on: self-hosted
    timeout-minutes: 30  # Prevent hanging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python Dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          pip install --upgrade pip
          
          # Install from requirements.txt if it exists, otherwise install individually
          if [ -f "requirements.txt" ]; then
            echo "📄 Installing from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "📦 Installing dependencies individually..."
            pip install requests pyyaml python-dateutil
          fi
          
          # Verify installations
          python --version
          pip list | grep -E "(requests|pyyaml|python-dateutil)"

      - name: Validate Repository Structure
        run: |
          echo "🔍 Validating repository structure..."
          
          # Navigate to docker-compose directory (mounted in the runner)
          COMPOSE_PATH="/workspace"
          if [ -d "$COMPOSE_PATH" ]; then
            echo "✅ Found docker-compose directory at $COMPOSE_PATH"
            cd "$COMPOSE_PATH"
          else
            echo "❌ Docker-compose directory not found at $COMPOSE_PATH"
            echo "📁 Available directories:"
            ls -la /
            echo "📁 Workspace contents:"
            ls -la /workspace/ 2>/dev/null || echo "Workspace not accessible"
            exit 1
          fi
          
          # Count services
          TOTAL_SERVICES=$(find services -name "docker-compose.yml" -type f | wc -l)
          echo "📊 Found $TOTAL_SERVICES services to check"
          
          # List services by category
          echo "📁 Services by category:"
          find services -name "docker-compose.yml" -type f | while read file; do
            category=$(echo $file | cut -d'/' -f2)
            service=$(echo $file | cut -d'/' -f3)
            echo "  $category/$service"
          done | sort
          
          if [ $TOTAL_SERVICES -eq 0 ]; then
            echo "❌ No services found!"
            exit 1
          fi
          
          echo "✅ Repository structure validated"
          echo "📁 Working from: $(pwd)"

      - name: Check for Updates
        id: update_check
        env:
          FORCE_CHECK: ${{ github.event.inputs.force_check || 'false' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "🔍 Starting comprehensive update check..."
          echo "Force check: $FORCE_CHECK"
          echo "Dry run: $DRY_RUN"
          
          # Navigate to docker-compose directory (mounted in runner)
          COMPOSE_PATH="/workspace"
          cd "$COMPOSE_PATH"
          echo "📁 Working from: $(pwd)"
          
          # Create backup of current state
          echo "💾 Creating backup of current docker-compose files..."
          find services -name "docker-compose.yml" -exec cp {} {}.backup \;
          
          # Clear the GITHUB_ENV file to start fresh
          echo "" > $GITHUB_ENV
          
          # Run update checker
          echo "🚀 Running enhanced update checker..."
          if python "$GITHUB_WORKSPACE/scripts/check-updates.py"; then
            echo "✅ Update check completed successfully"
          else
            echo "❌ Update check failed"
            
            # Restore backups
            echo "🔄 Restoring original files..."
            find services -name "docker-compose.yml.backup" | while read backup; do
              original=${backup%.backup}
              mv "$backup" "$original"
            done
            
            exit 1
          fi
          
          # Clean up backups if successful
          find services -name "docker-compose.yml.backup" -delete

      - name: Validate Updated Compose Files
        if: env.UPDATES_FOUND == 'true'
        run: |
          echo "🔍 Validating updated docker-compose files..."
          
          # Navigate to docker-compose directory (mounted in runner)
          COMPOSE_PATH="/workspace"
          cd "$COMPOSE_PATH"
          
          # Find .env file for validation
          ENV_FILE=""
          if [ -f ".env" ]; then
            ENV_FILE="$(pwd)/.env"
          elif [ -f "/workspace/.env" ]; then
            ENV_FILE="/workspace/.env"
          else
            echo "⚠️ No .env file found, using environment variables only"
          fi
          
          # Validate each compose file
          VALIDATION_ERRORS=0
          find services -name "docker-compose.yml" -type f | while read compose_file; do
            echo "Validating: $compose_file"
            
            cd "$(dirname "$compose_file")"
            if [ ! -z "$ENV_FILE" ]; then
              if docker-compose --env-file "$ENV_FILE" config >/dev/null 2>&1; then
                echo "✅ Valid: $compose_file"
              else
                echo "❌ Invalid: $compose_file"
                docker-compose --env-file "$ENV_FILE" config
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            else
              if docker-compose config >/dev/null 2>&1; then
                echo "✅ Valid: $compose_file"
              else
                echo "❌ Invalid: $compose_file"
                docker-compose config
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            fi
            cd "$COMPOSE_PATH"
          done
          
          if [ $VALIDATION_ERRORS -gt 0 ]; then
            echo "❌ Found $VALIDATION_ERRORS validation errors"
            exit 1
          fi
          
          echo "✅ All compose files validated successfully"

      - name: Generate Simple Update Summary
        if: env.UPDATES_FOUND == 'true'
        run: |
          echo "📋 Generating update summary..."
          
          # Create a simple summary file
          echo "## Container Updates Available" > update_summary.md
          echo "" >> update_summary.md
          echo "Found updates for container services." >> update_summary.md
          echo "" >> update_summary.md
          echo "### Modified Files" >> update_summary.md
          git diff --name-only HEAD | grep "docker-compose.yml" | while read file; do
            echo "- \`$file\`" >> update_summary.md
          done || echo "- No modified files found" >> update_summary.md
          
          # Show the summary
          echo "📄 Update Summary:"
          cat update_summary.md

      - name: Create Pull Request
        if: env.UPDATES_FOUND == 'true' && github.event.inputs.dry_run != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            📦 Weekly container updates - ${{ env.UPDATE_DATE }}
            
            Automated update check found new versions for multiple services.
          title: '📦 Weekly Container Updates - ${{ env.UPDATE_DATE }}'
          body: |
            ## 🔄 Automated Container Updates
            
            This PR contains automated updates for container versions across the infrastructure.
            
            **Update Summary:** ${{ env.UPDATE_SUMMARY }}
            
            ### 🔍 Review Checklist
            - [ ] Review changelog links for breaking changes
            - [ ] Verify no critical services are affected during deployment window
            - [ ] Confirm recent backup exists
            - [ ] Check for any service-specific update notes
            
            ### 🚀 Deployment Process
            1. **Merge this PR** to trigger automated deployment
            2. **Monitor deployment** via GitHub Actions
            3. **Verify service health** post-deployment
            4. **Rollback if needed** using previous compose file versions
            
            ### 📊 Update Statistics
            - **Update Date**: ${{ env.UPDATE_DATE }}
            - **Services Updated**: Multiple services across various categories
            
            ### 🔗 Useful Links
            - [Deployment Logs](https://github.com/${{ github.repository }}/actions)
            - [Service Dashboard](http://your-dashboard-url)
            - [Monitoring](http://your-grafana-url)
            
            ---
            
            *This PR was automatically generated by the weekly update check workflow.*
            *Review carefully before merging to ensure service stability.*
          branch: container-updates-${{ env.UPDATE_DATE }}
          delete-branch: true
          draft: false
          labels: |
            automated
            container-updates
            infrastructure

      - name: Dry Run Summary
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 DRY RUN COMPLETED"
          echo "=================="
          
          if [ "$UPDATES_FOUND" = "true" ]; then
            echo "✅ Updates found but PR creation skipped (dry run mode)"
            echo ""
            echo "📊 Summary:"
            echo "- Updates available: Yes"
            echo "- Modified files: $(git diff --name-only HEAD | grep -c "docker-compose.yml" || echo "0")"
            echo ""
            echo "📋 Changed files:"
            git diff --name-only HEAD | grep "docker-compose.yml" || echo "None"
            
            # Reset changes since this is a dry run
            echo ""
            echo "🔄 Resetting changes (dry run cleanup)..."
            git checkout -- .
          else
            echo "ℹ️ No updates found"
          fi

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "🧹 Cleaning up after failure..."
          
          # Restore any backup files
          find services -name "docker-compose.yml.backup" | while read backup; do
            original=${backup%.backup}
            if [ -f "$backup" ]; then
              echo "Restoring: $original"
              mv "$backup" "$original"
            fi
          done
          
          # Reset any uncommitted changes
          git checkout -- . || true
          
          echo "❌ Update check failed. Repository state restored."

      - name: Final Status Report
        if: always()
        run: |
          echo "📊 FINAL STATUS REPORT"
          echo "====================="
          echo "Workflow: ${{ github.workflow }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Status: ${{ job.status }}"
          echo "Updates Found: ${UPDATES_FOUND:-false}"
          echo "Dry Run: ${{ github.event.inputs.dry_run || 'false' }}"
          echo "Force Check: ${{ github.event.inputs.force_check || 'false' }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          if [ "$UPDATES_FOUND" = "true" ] && [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            echo "🎉 PR created successfully for container updates"
          elif [ "$UPDATES_FOUND" = "true" ] && [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "🔍 Updates detected in dry run mode"
          else
            echo "ℹ️ No updates available at this time"
          fi