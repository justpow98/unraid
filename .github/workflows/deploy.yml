name: Deploy to Unraid

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ closed ]
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true)
    runs-on: self-hosted
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison
        
      - name: Setup Environment
        run: |
          echo "üîÑ Setting up deployment environment..."
          echo "Working directory: $(pwd)"
          echo "Runner: ${{ runner.name }}"
          echo "Event: ${{ github.event_name }}"
          
          # Navigate to the docker-compose directory (mounted in runner)
          COMPOSE_PATH="/workspace"
          if [ -d "$COMPOSE_PATH" ]; then
            echo "‚úÖ Found docker-compose directory at $COMPOSE_PATH"
            cd "$COMPOSE_PATH"
            echo "üìÅ Changed to: $(pwd)"
          else
            echo "‚ùå Docker-compose directory not found at $COMPOSE_PATH"
            echo "üìÅ Available paths:"
            ls -la /
            exit 1
          fi
          
          # Verify .env file access
          if [ -f ".env" ]; then
            echo "‚úÖ Found .env file in docker-compose directory"
          elif [ -f "/workspace/.env" ]; then
            echo "‚úÖ Found .env file at /workspace/.env"
          else
            echo "‚ùå .env file not found"
            echo "üìÅ Checking workspace contents..."
            ls -la /workspace/ 2>/dev/null || echo "Cannot access /workspace"
            exit 1
          fi
          
          # Verify Docker access
          docker --version
          docker-compose --version
          echo "üìä Current running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}" | head -10

      - name: Detect Changed Services
        id: changes
        run: |
          echo "üîç Detecting changed services..."
          
          # Ensure we're in the docker-compose directory (mounted in runner)
          COMPOSE_PATH="/workspace"
          cd "$COMPOSE_PATH"
          
          # Services that should NEVER be deployed
          EXCLUDED_SERVICES=(
            "services/automation/github-runner"  # Never redeploy the runner itself!
          )
          
          # Initialize arrays
          CHANGED_SERVICES=""
          ALL_SERVICES=""
          
          # Find all docker-compose.yml files
          echo "üìÅ Scanning for all services..."
          find services -name "docker-compose.yml" -type f | while read compose_file; do
            service_dir=$(dirname "$compose_file")
            service_name=$(basename "$service_dir")
            category=$(basename $(dirname "$service_dir"))
            echo "Found: $category/$service_name ($compose_file)"
          done > all_services.txt
          
          # Determine deployment scope
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üöÄ Manual deployment triggered"
            DEPLOYMENT_TYPE="manual"
            
            # For manual deployments, check git changes in the last commit
            # This is much safer than file modification time
            cd "$GITHUB_WORKSPACE"
            
            # Get recently changed files from git (last 3 commits to be safe)
            git diff --name-only HEAD~3 HEAD | grep "docker-compose.yml" > /tmp/manual_changes.txt || touch /tmp/manual_changes.txt
            
            # If no recent git changes, don't deploy anything
            if [ ! -s /tmp/manual_changes.txt ]; then
              echo "‚ÑπÔ∏è No recent docker-compose.yml changes found in git history"
              echo "üí° Use --force flag in workflow_dispatch to override"
              touch changed_services.txt
            else
              echo "üìù Found recent changes in git:"
              cat /tmp/manual_changes.txt
              cp /tmp/manual_changes.txt changed_services.txt
            fi
            
            cd "$COMPOSE_PATH"
          else
            echo "üìù Automatic deployment - checking git changes"
            DEPLOYMENT_TYPE="automatic"
            
            # Check for changes in the repository (GitHub workspace)
            cd "$GITHUB_WORKSPACE"
            
            # Get changed files between current and previous commit
            git diff --name-only HEAD~1 HEAD > changed_files.txt || git diff --name-only HEAD > changed_files.txt
            
            echo "Changed files:"
            cat changed_files.txt
            
            # Find services with changed compose files
            grep "docker-compose.yml" changed_files.txt > /tmp/changed_services.txt || touch /tmp/changed_services.txt
            
            # Copy back to compose directory
            cd "$COMPOSE_PATH"
            cp /tmp/changed_services.txt changed_services.txt
          fi
          
          # Filter out excluded services
          if [ -s changed_services.txt ]; then
            echo "üîí Filtering out excluded services..."
            cp changed_services.txt changed_services_unfiltered.txt
            
            # Remove excluded services
            for excluded in "${EXCLUDED_SERVICES[@]}"; do
              grep -v "$excluded" changed_services_unfiltered.txt > changed_services.txt.tmp || touch changed_services.txt.tmp
              mv changed_services.txt.tmp changed_services.txt
            done
            
            # Show what was filtered
            if [ -s changed_services_unfiltered.txt ] && [ ! -s changed_services.txt ]; then
              echo "‚ö†Ô∏è All changed services were excluded from deployment"
            elif [ -s changed_services_unfiltered.txt ]; then
              echo "üîí Excluded services:"
              for excluded in "${EXCLUDED_SERVICES[@]}"; do
                if grep -q "$excluded" changed_services_unfiltered.txt; then
                  echo "  - $excluded (GitHub runner - never deploy)"
                fi
              done
            fi
          fi
          
          # Set outputs
          echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
          
          # Count services
          TOTAL_SERVICES=$(wc -l < all_services.txt)
          CHANGED_COUNT=$(wc -l < changed_services.txt)
          
          echo "üìä Service Summary:"
          echo "  Total services: $TOTAL_SERVICES"
          echo "  Changed services: $CHANGED_COUNT"
          echo "  Deployment type: $DEPLOYMENT_TYPE"
          
          if [ $CHANGED_COUNT -gt 0 ]; then
            echo "üìã Services to deploy:"
            cat changed_services.txt
          fi
          
          echo "total_services=$TOTAL_SERVICES" >> $GITHUB_OUTPUT
          echo "changed_services=$CHANGED_COUNT" >> $GITHUB_OUTPUT

      - name: Deploy Infrastructure Services First
        if: steps.changes.outputs.changed_services > 0 || github.event_name == 'workflow_dispatch'
        run: |
          echo "üèóÔ∏è Deploying infrastructure services first..."
          
          # Ensure we're in the docker-compose directory (mounted in runner)
          COMPOSE_PATH="/workspace"
          cd "$COMPOSE_PATH"
          
          # Priority order for infrastructure
          INFRASTRUCTURE_SERVICES=(
            "services/infrastructure/networks"
            "services/infrastructure/redis"
            "services/networking/nginx-proxy-manager"
            "services/networking/cloudflared"
            "services/security/authentik"
            "services/monitoring/prometheus"
            "services/monitoring/loki"
          )
          
          for service_path in "${INFRASTRUCTURE_SERVICES[@]}"; do
            if [ -f "$service_path/docker-compose.yml" ]; then
              if [ "${{ steps.changes.outputs.deployment_type }}" = "manual" ] || grep -q "$service_path" changed_services.txt; then
                echo "üîß Deploying infrastructure: $(basename $service_path)"
                "$GITHUB_WORKSPACE/scripts/deploy-service.sh" "$service_path" || echo "‚ö†Ô∏è Infrastructure deployment failed: $service_path"
                sleep 5  # Allow time for service startup
              fi
            fi
          done

      - name: Deploy Application Services
        if: steps.changes.outputs.changed_services > 0 || github.event_name == 'workflow_dispatch'
        run: |
          echo "üì¶ Deploying application services..."
          
          # Ensure we're in the docker-compose directory (mounted in runner)
          COMPOSE_PATH="/workspace"
          cd "$COMPOSE_PATH"
          
          # Process changed services or all recent services for manual deployment
          DEPLOYED_COUNT=0
          FAILED_COUNT=0
          
          if [ -s changed_services.txt ]; then
            echo "üéØ Deploying specific changed services:"
            cat changed_services.txt
            
            while IFS= read -r compose_file; do
              if [ -f "$compose_file" ]; then
                service_dir=$(dirname "$compose_file")
                service_name=$(basename "$service_dir")
                category=$(basename $(dirname "$service_dir"))
                
                # Skip infrastructure services (already deployed)
                if [[ "$category" == "infrastructure" ]] || [[ "$category" == "networking" && "$service_name" =~ ^(nginx-proxy-manager|cloudflared)$ ]]; then
                  echo "‚è≠Ô∏è Skipping infrastructure service: $category/$service_name"
                  continue
                fi
                
                echo "üöÄ Deploying: $category/$service_name"
                
                if "$GITHUB_WORKSPACE/scripts/deploy-service.sh" "$service_dir"; then
                  echo "‚úÖ Successfully deployed: $category/$service_name"
                  ((DEPLOYED_COUNT++)) || true
                else
                  echo "‚ùå Failed to deploy: $category/$service_name"
                  ((FAILED_COUNT++)) || true
                fi
                
                # Brief pause between deployments
                sleep 2
              fi
            done < changed_services.txt
          else
            echo "‚ÑπÔ∏è No changed services found"
          fi
          
          echo "üìä Deployment Summary:"
          echo "  Successful: $DEPLOYED_COUNT"
          echo "  Failed: $FAILED_COUNT"
          echo "  Total attempted: $((DEPLOYED_COUNT + FAILED_COUNT))"

      - name: Health Check Deployed Services
        if: steps.changes.outputs.changed_services > 0 || github.event_name == 'workflow_dispatch'
        run: |
          echo "üîç Performing health checks on deployed services..."
          
          # Wait for services to start
          sleep 10
          
          # Check running containers
          echo "üìä Currently running containers:"
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" | head -20
          
          # Check for any failed containers
          FAILED_CONTAINERS=$(docker ps -a --filter "status=exited" --filter "status=dead" --format "{{.Names}}" | head -10)
          
          if [ ! -z "$FAILED_CONTAINERS" ]; then
            echo "‚ö†Ô∏è Found containers with issues:"
            echo "$FAILED_CONTAINERS"
            
            # Show logs for failed containers
            echo "$FAILED_CONTAINERS" | while read container; do
              if [ ! -z "$container" ]; then
                echo "üìã Logs for $container:"
                docker logs --tail 20 "$container" 2>&1 || echo "Could not get logs for $container"
                echo "---"
              fi
            done
          else
            echo "‚úÖ All containers appear to be running correctly"
          fi

      - name: Cleanup and Optimization
        run: |
          echo "üßπ Performing cleanup and optimization..."
          
          # Remove orphaned containers
          echo "üóëÔ∏è Removing orphaned containers..."
          docker container prune -f
          
          # Remove unused images (be careful not to remove recently pulled images)
          echo "üóëÔ∏è Removing unused images older than 24h..."
          docker image prune -a -f --filter "until=24h"
          
          # Remove unused networks
          echo "üóëÔ∏è Removing unused networks..."
          docker network prune -f
          
          # Remove unused volumes (be very careful with this)
          echo "üóëÔ∏è Removing unused volumes..."
          docker volume prune -f
          
          # Show final status
          echo "üìä Final system status:"
          echo "üê≥ Containers: $(docker ps -q | wc -l) running"
          echo "üñºÔ∏è Images: $(docker images -q | wc -l) total"
          echo "üåê Networks: $(docker network ls -q | wc -l) total"
          echo "üíæ Volumes: $(docker volume ls -q | wc -l) total"
          
          # Show disk usage
          echo "üíΩ Docker disk usage:"
          docker system df

      - name: Generate Deployment Report
        if: always()
        run: |
          echo "üìã Generating deployment report..."
          
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # Create deployment summary
          cat > deployment_report.md << EOF
          # Deployment Report - $TIMESTAMP
          
          ## üìä Deployment Details
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: \`${COMMIT_SHA:0:7}\`
          - **Message**: $COMMIT_MSG
          - **Runner**: ${{ runner.name }}
          
          ## üîÑ Services Summary
          - **Total Services**: ${{ steps.changes.outputs.total_services }}
          - **Changed Services**: ${{ steps.changes.outputs.changed_services }}
          - **Deployment Type**: ${{ steps.changes.outputs.deployment_type }}
          
          ## üê≥ Container Status
          \`\`\`
          $(docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" | head -10)
          \`\`\`
          
          ## üíæ System Resources
          \`\`\`
          $(docker system df)
          \`\`\`
          
          ---
          *Generated automatically by GitHub Actions*
          EOF
          
          echo "üìÑ Deployment report generated:"
          cat deployment_report.md

      - name: Notify on Failure
        if: failure()
        run: |
          echo "üö® Deployment failed!"
          echo "Please check the logs above for details."
          echo "Consider running a manual deployment with workflow_dispatch."
          
          # Show recent container logs that might indicate issues
          echo "üìã Recent logs from potentially problematic containers:"
          docker ps --filter "status=exited" --format "{{.Names}}" | head -5 | while read container; do
            if [ ! -z "$container" ]; then
              echo "=== $container ==="
              docker logs --tail 10 "$container" 2>&1 || echo "No logs available"
            fi
          done